@startuml
title Architecture Microservices - Lab 6 Système POS + E-commerce avec Saga

' API Gateway Kong - Point d'entrée unique
node "Kong API Gateway :8080" {
  component "Kong Gateway" as KONG {
    component "Routes & Services" as ROUTES
    component "Authentication" as AUTH
    component "Rate Limiting" as RATE
    component "CORS & Security" as CORS
    component "Load Balancer" as LB
}
}

' Microservices Layer
package "Microservices Layer" {
  
  node "Product Service :8001" {
    component "Product API" as PRODUCT_API
    database "PostgreSQL\nproduct_db" as PRODUCT_DB
  }
  
  node "Inventory Service :8002" {
    component "Inventory API" as INVENTORY_API
    database "PostgreSQL\ninventory_db" as INVENTORY_DB
  }
  
  node "Sales Service :8003" {
    component "Sales API" as SALES_API
    database "PostgreSQL\nsales_db" as SALES_DB
  }
  
  node "Reporting Service :8004" {
    component "Reporting API" as REPORTING_API
    database "PostgreSQL\nreporting_db" as REPORTING_DB
  }
  
  node "Customer Service :8005" {
    component "Customer API" as CUSTOMER_API
    database "PostgreSQL\ncustomer_db" as CUSTOMER_DB
  }
  
  package "Cart Service Cluster (Load Balanced)" {
    node "Cart Service 1 :8006" {
      component "Cart API 1" as CART_API_1
}
    node "Cart Service 2 :8006" {
      component "Cart API 2" as CART_API_2
}
    node "Cart Service 3 :8006" {
      component "Cart API 3" as CART_API_3
}
    database "Redis\ncart_cache" as CART_CACHE
}

  node "Order Service :8007" {
    component "Order API" as ORDER_API
    database "PostgreSQL\norder_db" as ORDER_DB
  }
  
  node "Saga Orchestrator :8008" {
    component "Saga Orchestrator API" as SAGA_API
    component "State Machine" as SAGA_STATE_MACHINE
    component "Compensation Engine" as COMPENSATION_ENGINE
  }
  
  node "Payment Service :8009" {
    component "Payment API" as PAYMENT_API
    database "PostgreSQL\npayment_db" as PAYMENT_DB
  }
}

' Monitoring & Observability
package "Observability Stack" {
  node "Grafana :3000" {
    component "Dashboards" as GRAFANA
  }
  
  node "Prometheus :9090" {
    component "Metrics Collection" as PROMETHEUS
  }
}

' Client Applications
package "Client Applications" {
  actor "E-commerce Web" as WEB_CLIENT
  actor "Mobile App" as MOBILE_CLIENT
  actor "POS Terminals" as POS_CLIENT
  actor "Admin Dashboard" as ADMIN_CLIENT
}

' Kong Gateway connections to microservices
KONG --> PRODUCT_API : "/api/v1/products"
KONG --> INVENTORY_API : "/api/v1/inventory"
KONG --> SALES_API : "/api/v1/sales"
KONG --> REPORTING_API : "/api/v1/reports"
KONG --> CUSTOMER_API : "/api/v1/customers"
KONG --> CART_API_1 : "/api/v1/cart"
KONG --> CART_API_2 : "/api/v1/cart"
KONG --> CART_API_3 : "/api/v1/cart"
KONG --> ORDER_API : "/api/v1/orders"
KONG --> SAGA_API : "/api/v1/sagas"
KONG --> PAYMENT_API : "/api/v1/payment"

' Database connections
PRODUCT_API --> PRODUCT_DB
INVENTORY_API --> INVENTORY_DB
SALES_API --> SALES_DB
REPORTING_API --> REPORTING_DB
CUSTOMER_API --> CUSTOMER_DB
CART_API_1 --> CART_CACHE
CART_API_2 --> CART_CACHE
CART_API_3 --> CART_CACHE
ORDER_API --> ORDER_DB
PAYMENT_API --> PAYMENT_DB
SAGA_API *-- SAGA_STATE_MACHINE
SAGA_API *-- COMPENSATION_ENGINE

' Inter-service communication
SALES_API ..> INVENTORY_API : "Stock validation"
SALES_API ..> PRODUCT_API : "Product info"
REPORTING_API ..> SALES_API : "Sales data"
REPORTING_API ..> INVENTORY_API : "Stock data"
ORDER_API ..> CART_API_1 : "Cart checkout"
ORDER_API ..> INVENTORY_API : "Stock reservation"
ORDER_API ..> CUSTOMER_API : "Customer validation"

' Saga Orchestration communication
SAGA_API ..> CART_API_1 : "Cart validation"
SAGA_API ..> INVENTORY_API : "Stock reservation"
SAGA_API ..> PAYMENT_API : "Payment processing"
SAGA_API ..> ORDER_API : "Order confirmation"

' Client connections
WEB_CLIENT --> KONG : "HTTPS"
MOBILE_CLIENT --> KONG : "HTTPS"
POS_CLIENT --> KONG : "API Key Auth"
ADMIN_CLIENT --> KONG : "JWT Auth"

' Monitoring connections
PRODUCT_API ..> PROMETHEUS : "metrics"
INVENTORY_API ..> PROMETHEUS : "metrics"
SALES_API ..> PROMETHEUS : "metrics"
REPORTING_API ..> PROMETHEUS : "metrics"
CUSTOMER_API ..> PROMETHEUS : "metrics"
CART_API_1 ..> PROMETHEUS : "metrics"
ORDER_API ..> PROMETHEUS : "metrics"
SAGA_API ..> PROMETHEUS : "saga metrics"
PAYMENT_API ..> PROMETHEUS : "payment metrics"
PROMETHEUS --> GRAFANA : "visualization"

note bottom of KONG
  Kong Gateway Features:
  - API Key & JWT Authentication
  - Rate Limiting (100/min, 1000/hour)
  - CORS Configuration
  - Load Balancing (Cart Service)
  - Request/Response Transformation
  - Health Checks & Circuit Breaker
end note

note bottom of "Cart Service Cluster (Load Balanced)"
  Load Balancing Strategy:
  - Algorithm: least-connections
  - Health Checks: /health every 15s
  - Auto failover on unhealthy instances
  - Session stickiness via Redis
end note

note bottom of "Microservices Layer"
  Database per Service Pattern:
  - 9 PostgreSQL databases (isolated)
  - 1 Redis cache (shared by Cart instances)
  - In-memory saga state management
  - No direct database access between services
  - Saga orchestration for distributed transactions
end note

note right of "Saga Orchestrator :8008"
  Saga Orchestrator Features:
  - Synchronous orchestration pattern
  - State machine coordination
  - Automatic compensation on failures
  - Prometheus metrics integration
  - Timeout and retry mechanisms
  - In-memory state persistence
end note

@enduml
